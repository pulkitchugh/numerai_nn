# Step 7: Select Training Data Set
#--------------------------------------------------------------
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
#--------------------------------------------------------------
# Step 8: Select Testing Data Set
#--------------------------------------------------------------
cat("\nStep 8: Select testing dataset")
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
nrow(testDataset)
#--------------------------------------------------------------
# Step 9: Model Building (Training)
#--------------------------------------------------------------
cat("\nStep 9: Model Building -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- nnet(formula, trainDataset, size=10, linout=TRUE, skip=TRUE, MaxNWts=10000, trace=FALSE, maxit=100)
model
#--------------------------------------------------------------
# Step 10: Prediction (Testing)
#--------------------------------------------------------------
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- as.numeric(round(predict(model, testDataset)))
head(Predicted)
PredictedProb <- predict(model, testDataset)
head(PredictedProb)
#--------------------------------------------------------------
# Step 11: Extracting Actual
#--------------------------------------------------------------
cat("\nStep 11: Extracting Actual")
Actual <- as.double(unlist(testDataset[target]))
head(Actual)
#--------------------------------------------------------------
# Step 12: Model Evaluation
#--------------------------------------------------------------
cat("\nStep 12: Model Evaluation")
# Step 12.1: Confusion Matrix
ConfusionMatrix <- misclassCounts(Predicted,Actual)$conf.matrix
ConfusionMatrix
# Step 12.2: Evaluations Parameters
# AUC, ERR, Sen, Spec, Pre,Recall, TPR, FPR, etc
EvaluationsParameters <- round(HMeasure(Actual,PredictedProb)$metrics,3)
EvaluationsParameters
# Step 12.3: Accuracy
accuracy <- round(mean(Actual==Predicted) *100,2)
accuracy
accuracy
# Step 12.4: Total Time
totalTime = proc.time()[3] - startTime
# Step 12.5: Plotting
# ROC and ROCH Curve
png(filename=paste(modelName,"-01-ROCPlot.png",sep=''))
plotROC(HMeasure(Actual,PredictedProb),which=1)
totalTime
# H Measure Curve
png(filename=paste(modelName,"-02-HMeasure.png",sep=''))
dev.off()
dev.off()
# AUC Curve
png(filename=paste(modelName,"-03-AUC.png",sep=''))
plotROC(HMeasure(Actual,PredictedProb),which=3)
dev.off()
# SmoothScoreDistribution Curve
png(filename=paste(modelName,"-04-SmoothScoreDistribution.png",sep=''))
plotROC(HMeasure(Actual,PredictedProb),which=4)
dev.off()
# Step 12.5: Save evaluation resut
EvaluationsParameters$Accuracy <- accuracy
EvaluationsParameters$TotalTime <- totalTime
rownames(EvaluationsParameters)=modelName
EvaluationsParameters
#--------------------------------------------------------------
# Step 13: Writing to file
#--------------------------------------------------------------
cat("\nStep 13: Writing to file")
# Step 13.1: Writing to file (evaluation result)
write.csv(EvaluationsParameters, file=paste(modelName,"-Evaluation-Result.csv",sep=''), row.names=TRUE)
# Step 13.2: Writing to file (Actual and Predicted)
write.csv(data.frame(Actual,Predicted), file=paste(modelName,"-ActualPredicted-Result.csv",sep=''), row.names=FALSE)
#--------------------------------------------------------------
# Step 14: Saving the Model
#--------------------------------------------------------------
cat("\nStep 14: Saving the Model ->",modelName)
save.image(file=paste(modelName,"-Model.RData",sep=''))
cat("\nDone")
cat("\nTotal Time Taken: ", totalTime," sec")
#--------------------------------------------------------------
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
model   <- nnet(formula, trainDataset, size=17, linout=TRUE, skip=TRUE, MaxNWts=34000, trace=FALSE, maxit=100)
#--------------------------------------------------------------
# Step 1: Include Library
#--------------------------------------------------------------
cat("\nStep 1: Library Inclusion")
library(nnet)
library(hmeasure)
#--------------------------------------------------------------
# Step 2: Variable Declaration
#--------------------------------------------------------------
cat("\nStep 2: Variable Declaration")
modelName <- "neuralNetwork"
modelName
setwd("e:/Learning/ML/Numerai/Tournament 92")
InputDataFileName="numerai_training_data.csv"
InputDataFileName
training = 75     # Defining Training Percentage; Testing = 100 - Training
#--------------------------------------------------------------
# Step 3: Data Loading
#--------------------------------------------------------------
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
#--------------------------------------------------------------
# Step 4: Count total number of observations/rows.
#--------------------------------------------------------------
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
#--------------------------------------------------------------
# Step 5: Choose Target variable
#--------------------------------------------------------------
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[51]   # i.e. Cancer
target
#--------------------------------------------------------------
# Step 6: Choose inputs Variables
#--------------------------------------------------------------
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
length(inputs)
#Feature Selection
#n=4
#inputs <-sample(inputs, n)
#--------------------------------------------------------------
# Step 7: Select Training Data Set
#--------------------------------------------------------------
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
#--------------------------------------------------------------
# Step 8: Select Testing Data Set
#--------------------------------------------------------------
cat("\nStep 8: Select testing dataset")
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
nrow(testDataset)
#--------------------------------------------------------------
# Step 9: Model Building (Training)
#--------------------------------------------------------------
cat("\nStep 9: Model Building -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- nnet(formula, trainDataset, size=17, linout=TRUE, skip=TRUE, MaxNWts=34000, trace=FALSE, maxit=100)
model
#--------------------------------------------------------------
# Step 10: Prediction (Testing)
#--------------------------------------------------------------
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- as.numeric(round(predict(model, testDataset)))
head(Predicted)
PredictedProb <- predict(model, testDataset)
head(PredictedProb)
#--------------------------------------------------------------
# Step 11: Extracting Actual
#--------------------------------------------------------------
cat("\nStep 11: Extracting Actual")
Actual <- as.double(unlist(testDataset[target]))
head(Actual)
#--------------------------------------------------------------
# Step 12: Model Evaluation
#--------------------------------------------------------------
cat("\nStep 12: Model Evaluation")
# Step 12.1: Confusion Matrix
ConfusionMatrix <- misclassCounts(Predicted,Actual)$conf.matrix
ConfusionMatrix
# Step 12.2: Evaluations Parameters
# AUC, ERR, Sen, Spec, Pre,Recall, TPR, FPR, etc
EvaluationsParameters <- round(HMeasure(Actual,PredictedProb)$metrics,3)
EvaluationsParameters
# Step 12.3: Accuracy
accuracy <- round(mean(Actual==Predicted) *100,2)
accuracy
# Step 12.4: Total Time
totalTime = proc.time()[3] - startTime
totalTime
# Step 12.5: Plotting
# ROC and ROCH Curve
png(filename=paste(modelName,"-01-ROCPlot.png",sep=''))
plotROC(HMeasure(Actual,PredictedProb),which=1)
dev.off()
# H Measure Curve
png(filename=paste(modelName,"-02-HMeasure.png",sep=''))
plotROC(HMeasure(Actual,PredictedProb),which=2)
dev.off()
# AUC Curve
png(filename=paste(modelName,"-03-AUC.png",sep=''))
plotROC(HMeasure(Actual,PredictedProb),which=3)
dev.off()
# SmoothScoreDistribution Curve
png(filename=paste(modelName,"-04-SmoothScoreDistribution.png",sep=''))
plotROC(HMeasure(Actual,PredictedProb),which=4)
dev.off()
# Step 12.5: Save evaluation resut
EvaluationsParameters$Accuracy <- accuracy
EvaluationsParameters$TotalTime <- totalTime
rownames(EvaluationsParameters)=modelName
EvaluationsParameters
#--------------------------------------------------------------
# Step 13: Writing to file
#--------------------------------------------------------------
cat("\nStep 13: Writing to file")
# Step 13.1: Writing to file (evaluation result)
write.csv(EvaluationsParameters, file=paste(modelName,"-Evaluation-Result.csv",sep=''), row.names=TRUE)
# Step 13.2: Writing to file (Actual and Predicted)
write.csv(data.frame(Actual,Predicted), file=paste(modelName,"-ActualPredicted-Result.csv",sep=''), row.names=FALSE)
#--------------------------------------------------------------
# Step 14: Saving the Model
#--------------------------------------------------------------
cat("\nStep 14: Saving the Model ->",modelName)
save.image(file=paste(modelName,"-Model.RData",sep=''))
cat("\nDone")
cat("\nTotal Time Taken: ", totalTime," sec")
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
rownames(EvaluationsParameters)=modelName
View(trainDataset)
source('E:/Learning/ML/Numerai/Tournament 92/nn.r')
#--------------------------------------------------------------
# Step 1: Include Library
#--------------------------------------------------------------
cat("\nStep 1: Library Inclusion")
library(nnet)
library(hmeasure)
#--------------------------------------------------------------
# Step 1: Include Library
#--------------------------------------------------------------
cat("\nStep 1: Library Inclusion")
library(nnet)
library(hmeasure)
#--------------------------------------------------------------
# Step 2: Variable Declaration
#--------------------------------------------------------------
cat("\nStep 2: Variable Declaration")
modelName <- "neuralNetwork"
modelName
setwd("e:/Learning/ML/Numerai/Tournament 92")
InputDataFileName="numerai_training_data.csv"
InputDataFileName
training = 75     # Defining Training Percentage; Testing = 100 - Training
#--------------------------------------------------------------
# Step 3: Data Loading
#--------------------------------------------------------------
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
#--------------------------------------------------------------
# Step 4: Count total number of observations/rows.
#--------------------------------------------------------------
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
#--------------------------------------------------------------
# Step 5: Choose Target variable
#--------------------------------------------------------------
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[51]   # i.e. Cancer
target
#--------------------------------------------------------------
# Step 6: Choose inputs Variables
#--------------------------------------------------------------
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
length(inputs)
#--------------------------------------------------------------
# Step 7: Select Training Data Set
#--------------------------------------------------------------
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
#--------------------------------------------------------------
# Step 8: Select Testing Data Set
#--------------------------------------------------------------
cat("\nStep 8: Select testing dataset")
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
#--------------------------------------------------------------
# Step 6: Choose inputs Variables
#--------------------------------------------------------------
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
inputst <- setdiff(names(test),targett)
#dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
test <- read.csv("numerai_tournament_data.csv", head=T)
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
(test)
(test)
names(test)
names(dataset)  # Show fields names or columns names
names(dataset)  # Show fields names or columns names
names(test)
#--------------------------------------------------------------
# Step 4: Count total number of observations/rows.
#--------------------------------------------------------------
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
#--------------------------------------------------------------
# Step 5: Choose Target variable
#--------------------------------------------------------------
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[51]
targett <- names(test)[54]
target
targett
#--------------------------------------------------------------
# Step 6: Choose inputs Variables
#--------------------------------------------------------------
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
inputst <- setdiff(names(test),targett)
inputst
length(inputs)
#--------------------------------------------------------------
# Step 7: Select Training Data Set
#--------------------------------------------------------------
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
#--------------------------------------------------------------
# Step 8: Select Testing Data Set
#--------------------------------------------------------------
cat("\nStep 8: Select testing dataset")
inputst <- setdiff(names(test),targett,id,era,data_type)
inputst <- setdiff(names(test),(targett,id,era,data_type))
inputst <- setdiff(names(test),targett)
inputst
inputst <- setdiff(names(inputst),id)
inputst <- setdiff(names(inputst),"id")
inputst
test  <- test[,grep("id|feature",names(test))]
inputst <- setdiff(names(test),targett)
inputst
View(test)
#--------------------------------------------------------------
# Step 1: Include Library
#--------------------------------------------------------------
cat("\nStep 1: Library Inclusion")
library(nnet)
library(hmeasure)
#--------------------------------------------------------------
# Step 2: Variable Declaration
#--------------------------------------------------------------
cat("\nStep 2: Variable Declaration")
modelName <- "neuralNetwork"
modelName
setwd("e:/Learning/ML/Numerai/Tournament 92")
InputDataFileName="numerai_training_data.csv"
InputDataFileName
training = 100     # Defining Training Percentage; Testing = 100 - Training
#--------------------------------------------------------------
# Step 3: Data Loading
#--------------------------------------------------------------
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
#dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
test <- read.csv("numerai_tournament_data.csv", head=T)
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
names(test)
#--------------------------------------------------------------
# Step 4: Count total number of observations/rows.
#--------------------------------------------------------------
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
#--------------------------------------------------------------
# Step 5: Choose Target variable
#--------------------------------------------------------------
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[51]
targett <- names(test)[54]
target
targett
#--------------------------------------------------------------
# Step 6: Choose inputs Variables
#--------------------------------------------------------------
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
test  <- test[,grep("id|feature",names(test))]
inputst <- setdiff(names(test),targett)
inputst
length(inputs)
#--------------------------------------------------------------
# Step 7: Select Training Data Set
#--------------------------------------------------------------
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
#--------------------------------------------------------------
# Step 8: Select Testing Data Set
#--------------------------------------------------------------
cat("\nStep 8: Select testing dataset")
testDataset <- test[1:totalDataset,c(inputst, targett)]
testDataset <- test[1:totalDataset,c(inputst, target)]
test  <- test[,grep("id|feature",names(test))]
inputst <- setdiff(names(test),targett)
inputst
testDataset <- test[1:totalDataset,c(inputst, target)]
testDataset <- test[1:totalDataset,c(inputs, target)]
testDataset <- test[(totalDataset * 0/100):totalDataset,c(inputst, target)]
testDataset <- test[(totalDataset * 0/100):totalDataset,c(inputst, target)]
testDataset <- dataset[(totalDataset * 0/100):totalDataset,c(inputst, target)]
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
testDataset <- test[(totalDataset * 0/100):totalDataset,c(inputst, targett)]
testDataset <- test[(totalDataset * 0/100):totalDataset,c(inputst, targett)]
testDataset <- dataset[1:totalDataset,c(inputst, targett)]
testDataset <- dataset[1:totalDataset,c(inputs, target)]
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
testDataset <- test[1:totalDataset,c(inputs, target)]
testDataset <- test[1:totalDataset,c(inputst, targett)]
testDataset <- test[1:totalDataset,c(inputst, targett)]
inputs <- setdiff(names(dataset),target)
inputs
test  <- test[,grep("id|feature",names(test))]
inputst <- setdiff(names(test),targett)
inputst
length(inputs)
length(inputst)
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
#--------------------------------------------------------------
# Step 8: Select Testing Data Set
#--------------------------------------------------------------
cat("\nStep 8: Select testing dataset")
testDataset <- test[1:totalDataset,c(inputst, targett)]
testDataset <- test[1:totalDataset]
testDataset <- test[1:totalDataset]
testDataset <- test
head(testDataset)
nrow(testDataset)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- nnet(formula, trainDataset, size=10, linout=TRUE, skip=TRUE, MaxNWts=10000, trace=FALSE, maxit=100)
model
odel
predictions <- predict(model, test[,-1], type="response")
modelName <- "neuralNetwork"
modelName
setwd("e:/Learning/ML/Numerai/Tournament 92")
InputDataFileName="numerai_training_data.csv"
InputDataFileName
training = 100     # Defining Training Percentage; Testing = 100 - Training
#--------------------------------------------------------------
# Step 3: Data Loading
#--------------------------------------------------------------
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
#dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
test <- read.csv("numerai_tournament_data.csv", head=T)
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
names(test)
#--------------------------------------------------------------
# Step 8: Select Testing Data Set
#--------------------------------------------------------------
cat("\nStep 8: Select testing dataset")
testDataset <- test[,grep("feature",names(test))]
install.packages("Metrics")
install.packages("Metrics")
library(Metrics)
